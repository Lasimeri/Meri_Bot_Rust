mod profilepfp;
mod lm;
mod reason;
mod search;
mod help;
mod ping;
mod echo;
mod sum;

use serenity::{
    async_trait,
    client::{Client, Context, EventHandler},
    framework::standard::{StandardFramework, macros::group},
    model::gateway::Ready,
    prelude::GatewayIntents,
    prelude::TypeMapKey,
};
use std::env;
use std::fs;
use std::collections::HashMap;
use tokio::signal;
use serenity::model::id::UserId;
use crate::search::ChatMessage;

// TypeMap key for LM chat context
pub struct LmContextMap;
impl TypeMapKey for LmContextMap {
    type Value = HashMap<UserId, Vec<ChatMessage>>;
}

// TypeMap key for Reason chat context
pub struct ReasonContextMap;
impl TypeMapKey for ReasonContextMap {
    type Value = HashMap<UserId, Vec<ChatMessage>>;
}

// Import all command constants generated by the #[command] macro
use crate::help::HELP_COMMAND;
use crate::ping::PING_COMMAND;
use crate::echo::ECHO_COMMAND;
use crate::profilepfp::PPFP_COMMAND;
use crate::lm::LM_COMMAND;
use crate::reason::REASON_COMMAND;
use crate::sum::SUM_COMMAND;

// Command group declaration - includes all available commands
#[group]
#[commands(ping, echo, help, ppfp, lm, reason, sum)]
struct General;

// Event handler implementation
struct Handler;

#[async_trait]
impl EventHandler for Handler {
    async fn ready(&self, _: Context, ready: Ready) {
        // log::info!("‚úÖ Bot connected as {}! (ID: {})", ready.user.name, ready.user.id);
        // log::info!("üìä Connected to {} guilds", ready.guilds.len());
        println!("‚úÖ Bot connected as {}!", ready.user.name);
    }
}

// Function to read configuration from botconfig.txt with multi-path fallback
fn load_bot_config() -> Result<HashMap<String, String>, String> {
    let config_paths = [
        "botconfig.txt",
        "../botconfig.txt", 
        "../../botconfig.txt",
        "src/botconfig.txt"
    ];
    
    // Clear any existing relevant environment variables
    env::remove_var("DISCORD_TOKEN");
    env::remove_var("PREFIX");
    env::remove_var("RUST_LOG");
    
    for config_path in &config_paths {
        match fs::read_to_string(config_path) {
            Ok(content) => {
                // Remove BOM if present
                let content = content.strip_prefix('\u{feff}').unwrap_or(&content);
                let mut config = HashMap::new();
                
                // Parse the config file line by line
                for line in content.lines() {
                    let line = line.trim();
                    
                    // Skip empty lines and comments
                    if line.is_empty() || line.starts_with('#') {
                        continue;
                    }
                    
                    // Parse KEY=VALUE format
                    if let Some(equals_pos) = line.find('=') {
                        let key = line[..equals_pos].trim().to_string();
                        let value = line[equals_pos + 1..].trim().to_string();
                        
                        // Set environment variable for compatibility
                        env::set_var(&key, &value);
                        config.insert(key, value);
                    }
                }
                
                println!("‚úÖ Configuration loaded from {}", config_path);
                return Ok(config);
            }
            Err(_) => {
                // Try next path
                continue;
            }
        }
    }
    
    Err("No botconfig.txt file found in any expected location (., .., ../.., src/)".to_string())
}

#[tokio::main]
async fn main() {
    // Initialize logger - must be done before any logging calls
    env_logger::Builder::from_env(env_logger::Env::default().default_filter_or("error"))
        .format_timestamp_secs()
        .init();
    
    // log::info!("üöÄ Meri Bot starting up...");
    
    // Load configuration from botconfig.txt file
    match load_bot_config() {
        Ok(_) => {
            // log::info!("‚úÖ Configuration loaded from botconfig.txt");
            println!("‚úÖ Configuration loaded from botconfig.txt");
        },
        Err(error) => {
            log::error!("‚ùå Failed to load botconfig.txt: {}", error);
            eprintln!("‚ùå Failed to load botconfig.txt: {}", error);
            eprintln!("Create a botconfig.txt file in the project root with: DISCORD_TOKEN=your_token_here and PREFIX=^");
            return;
        }
    };
    
    // Get Discord token from configuration
    let token = match env::var("DISCORD_TOKEN") {
        Ok(token) => {
            // Validate token is not placeholder
            if token == "YOUR_BOT_TOKEN_HERE" || token.is_empty() {
                log::error!("‚ùå DISCORD_TOKEN in botconfig.txt is set to placeholder value");
                eprintln!("‚ùå DISCORD_TOKEN in botconfig.txt is set to placeholder! Replace with your actual Discord bot token.");
                return;
            }
            // log::debug!("‚úÖ Discord token validated (length: {} chars)", token.len());
            token
        }
        Err(_) => {
            log::error!("‚ùå DISCORD_TOKEN not found in botconfig.txt file");
            eprintln!("‚ùå DISCORD_TOKEN not found in botconfig.txt file!");
            return;
        }
    };
    
    // Get command prefix from configuration
    let prefix = env::var("PREFIX").unwrap_or_else(|_| "^".to_string());
    // log::info!("ü§ñ Starting bot with prefix: '{}'", prefix);
    println!("ü§ñ Starting bot with prefix: '{}'", prefix);
    
    // Set up command framework
    // log::debug!("üîß Setting up command framework with prefix: '{}'", prefix);
    let framework = StandardFramework::new()
        .configure(|c| {
            c.prefix(&prefix)
            .case_insensitivity(true)
            .no_dm_prefix(true)
            .with_whitespace(true)
        })
        .after(|_ctx, msg, command_name, result| Box::pin(async move {
            match result {
                Ok(()) => {
                    // log::info!("‚úÖ Command '{}' executed successfully by user {} ({})", 
                    //           command_name, msg.author.name, msg.author.id);
                },
                Err(e) => {
                    log::error!("‚ùå Command '{}' failed for user {} ({}): {:?}", 
                               command_name, msg.author.name, msg.author.id, e);
                }
            }
        }))
        .unrecognised_command(|_ctx, msg, unrecognized_command_name| Box::pin(async move {
            // log::warn!("‚ùì Unrecognized command '{}' attempted by user {} ({})", 
            //           unrecognized_command_name, msg.author.name, msg.author.id);
        }))
        .group(&GENERAL_GROUP);

    // Configure bot intents
    let intents = GatewayIntents::non_privileged()
        | GatewayIntents::MESSAGE_CONTENT;

    // Create and start client
    // log::info!("üîß Creating Discord client...");
    let mut client = match Client::builder(token, intents)
        .event_handler(Handler)
        .framework(framework)
        .await
    {
        Ok(client) => {
            // log::info!("‚úÖ Discord client created successfully");
            client
        },
        Err(e) => {
            log::error!("‚ùå Error creating Discord client: {:?}", e);
            eprintln!("‚ùå Error creating Discord client: {:?}", e);
            eprintln!("Check your token in botconfig.txt file");
            return;
        }
    };

    // Initialize per-user context maps for LM and Reason commands
    {
        // log::debug!("üîß Initializing context maps...");
        let mut data = client.data.write().await;
        data.insert::<LmContextMap>(HashMap::new());
        data.insert::<ReasonContextMap>(HashMap::new());
        // log::debug!("‚úÖ Context maps initialized");
    }

    // Set up graceful shutdown on CTRL+C
    // log::info!("üöÄ Bot is running... Press Ctrl+C to stop");
    println!("üöÄ Bot is running... Press Ctrl+C to stop");
    tokio::select! {
        _ = signal::ctrl_c() => {
            // log::info!("üì° Received SIGINT, stopping bot gracefully...");
            println!("\n‚èπÔ∏è Stopping bot gracefully...");
        }
        result = client.start() => {
            if let Err(why) = result {
                log::error!("‚ùå Client error: {:?}", why);
                eprintln!("‚ùå Client error: {:?}", why);
            }
        }
    }
    
    // log::info!("üëã Bot shutdown complete");
    
    println!("‚úÖ Bot stopped");
}
